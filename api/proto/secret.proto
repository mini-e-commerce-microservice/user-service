syntax = "proto3";

package secret_proto;

option go_package = "generated/proto/secret_proto";

// JWT CONFIGURATION
message Jwt {
  JwtAccessToken access_token = 1;
  JwtOtpUsecase otp_usecase = 2;
  JwtRefreshToken refresh_token = 3;
}

message JwtAccessToken {
  int64 expired_at = 1;
  string key = 2;
}

message JwtOtpUsecase {
  int64 expired_at = 1;
  string key = 2;
}

message JwtRefreshToken {
  int64 expired_at = 1;
  string key = 2;
  int64 remember_me_expired_at = 3;
}

// KAFKA CONFIGURATION
message Kafka {
  string host = 1;
  KafkaTopic topic = 2;
}

message KafkaTopic {
  string cdc_user_table = 1;
  string cdc_product_outbox_table=2;
}

// MAILER
message Email {
  ListEmailAddress list_email_address = 1;
  MailTrap mail_trap = 2;
  TemplateHtml template_html = 3;
  bool use_used_mail_trap = 4;
}

message ListEmailAddress {
  string no_reply_email_address = 1;
}

message MailTrap {
  string host = 1;
  string password = 2;
  int32 port = 3;
  string username = 4;
}

message TemplateHtml {
  string activation_email_otp = 1;
}

// minio
message minio {
  string access_id = 1;
  string endpoint = 2;
  string private_bucket = 3;
  string secret_access_key = 4;
  bool use_ssl = 5;
}

// otel config
message Otel {
  string endpoint = 1;
  string password = 2;
  string username = 3;
}

// rabbitmq
message RabbitMQ {
  RabbitMQExchanges exchanges = 1;
  string password = 2;
  string url = 3;
  string username = 4;
}

message RabbitMQExchanges {
  RabbitMQNotificationExchange notification_exchange = 1;
}

message RabbitMQNotificationExchange {
  string name = 1;
  RabbitMQNotificationTypeEmail notification_type_email = 2;
}

message RabbitMQNotificationTypeEmail {
  RabbitMQNotificationTypeEmailRoutingKey routing_key = 1;
}

message RabbitMQNotificationTypeEmailRoutingKey {
  string name = 1;
  RabbitMQNotificationTypeEmailQueue queue = 2;
}

message RabbitMQNotificationTypeEmailQueue {
  string name = 1;
}

// redis
message Redis {
  string host = 1;
  string password = 2;
  string tracking_prefix = 3;
}

// service auth
message AuthService {
  string app_mode = 1;
  int64 app_port = 2;
  string database_dsn = 3;
  string redis_client_name=4;
  string tracer_name=5;
  string consumer_user_data_group_1=6;
}

// service product
message ProductService {
  string app_mode = 1;
  int64 app_port = 2;
  string database_dsn = 3;
  string redis_client_name=4;
  string tracer_name=5;
}

// service user
message UserService {
  string app_mode = 1;
  int64 app_port = 2;
  string database_dsn = 3;
  string tracer_name=4;
}